import React, { useEffect } from "react";
import { Product } from "@/types/product";
import ProductGrid from "@/components/products/ProductGrid";
import CatalogActiveFilters from "./CatalogActiveFilters";
import CatalogHeader from "./CatalogHeader";
import CatalogProductsInfo from "./CatalogProductsInfo";
import { SearchForm } from "./SearchForm";
import { useCatalogData } from '@/hooks/useCatalogData';
import { useActiveFilters } from '@/hooks/useCatalog/useActiveFilters';
import { useProductFiltering } from '@/hooks/useProductFiltering';
import { useIsMobile } from '@/hooks/use-mobile';
import { Button } from '@/components/ui/button';
import { Loader2, RefreshCw } from 'lucide-react';
import DataDebugger from '@/components/debug/DataDebugger';

interface CatalogProductsSectionProps {
  categoryParam: string | null;
  searchTerm: string;
  colorParam: string | null;
  sortBy: string;
  setSortBy: (sort: string) => void;
  loading: boolean;
  filteredProducts: any[];
  availableCategories: string[];
  activeFiltersCount: number;
  inStockCount: number;
  outOfStockCount: number;
  handleSearchChange: (value: string) => void;
  handleSearchSubmit: (e: React.FormEvent) => void;
  handleCategoryClick: (category: string) => void;
  handleColorFilter: (color: string) => void;
  handleClearAllFilters: () => void;
}

const CatalogProductsSection: React.FC<CatalogProductsSectionProps> = ({
  categoryParam,
  searchTerm,
  colorParam,
  sortBy,
  setSortBy,
  loading,
  filteredProducts,
  availableCategories,
  activeFiltersCount,
  inStockCount,
  outOfStockCount,
  handleSearchChange,
  handleSearchSubmit,
  handleCategoryClick,
  handleColorFilter,
  handleClearAllFilters
}) => {
  const isMobile = useIsMobile();
  const { allProducts, availableCategories: allCategories, categoryObjects, loading: catalogLoading, error, retry } = useCatalogData(categoryParam);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ö—É–∫–æ–≤
  const { activeFiltersCount: calculatedActiveFilters } = useActiveFilters({
    categoryParam,
    colorParam,
    priceRange: { min: 0, max: 500000000 },
    searchTerm
  });
  
  const { filteredProducts: allFilteredProducts, inStockCount: calculatedInStock, outOfStockCount: calculatedOutOfStock } = useProductFiltering({
    allProducts,
    searchTerm,
    priceRange: { min: 0, max: 500000000 },
    inStockOnly: false,
    sortBy,
    loading: catalogLoading,
    showColorVariants: true,
    colorParam
  });

  console.log('üìä CatalogProductsSection: Render state:', {
    allProducts: allProducts.length,
    filteredProducts: allFilteredProducts.length,
    loading: catalogLoading,
    error,
    categoryParam
  });

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  useEffect(() => {
    console.log('üîç CatalogProductsSection Debug Info:');
    console.log('üì¶ Filtered Products:', allFilteredProducts.length);
    console.log('üìÇ Available Categories:', allCategories);
    console.log('üéØ Category Param:', categoryParam);
    console.log('üîç Search Term:', searchTerm);
    console.log('‚ö° Loading:', catalogLoading);
    
    if (allFilteredProducts.length > 0) {
      console.log('üìã First Product Sample:', allFilteredProducts[0]);
    }
  }, [allFilteredProducts, allCategories, categoryParam, searchTerm, catalogLoading]);

  if (catalogLoading) {
    return (
      <div className="flex flex-col items-center justify-center py-12">
        <Loader2 className="h-8 w-8 animate-spin text-primary mb-4" />
        <p className="text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex flex-col items-center justify-center py-12">
        <div className="text-center max-w-md">
          <p className="text-destructive mb-4">{error}</p>
          <Button onClick={retry} variant="outline" className="flex items-center gap-2">
            <RefreshCw className="h-4 w-4" />
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ */}
      {import.meta.env.DEV && <DataDebugger />}
      
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <h2 className="text-2xl font-bold">
            {categoryParam ? categoryParam : '–í—Å–µ —Ç–æ–≤–∞—Ä—ã'}
          </h2>
          <span className="text-muted-foreground">
            ({allFilteredProducts.length} —Ç–æ–≤–∞—Ä–æ–≤)
          </span>
        </div>
      </div>

      {allFilteredProducts.length === 0 ? (
        <div className="text-center py-12">
          <p className="text-muted-foreground mb-4">
            {allProducts.length === 0 
              ? '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' 
              : '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            }
          </p>
          {allProducts.length === 0 && (
            <Button onClick={retry} variant="outline">
              –û–±–Ω–æ–≤–∏—Ç—å
            </Button>
          )}
        </div>
      ) : (
        <ProductGrid 
          products={allFilteredProducts}
          showAsColorVariants={true}
          columnsClass="grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5"
        />
      )}
    </div>
  );
};

export default CatalogProductsSection;
