import { v4 as uuidv4 } from "uuid";
import { ChatMessage } from "@/types/chat";
import { TELEGRAM_TOKEN } from "@/types/variables";

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ ID —á–∞—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
let cachedChatId: string | null = null;

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 */
export const getChatId = (): string => {
  if (cachedChatId) {
    return cachedChatId;
  }

  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ localStorage
    const stored = typeof localStorage !== "undefined"
      ? localStorage.getItem("chat_id")
      : null;

    if (stored) {
      cachedChatId = stored;
    } else {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
      cachedChatId = `chat_${Date.now()}_${uuidv4()}`;
      if (typeof localStorage !== "undefined") {
        localStorage.setItem("chat_id", cachedChatId);
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ localStorage –¥–ª—è chat_id:", error);
    if (!cachedChatId) {
      cachedChatId = `chat_${Date.now()}_${uuidv4()}`;
    }
  }

  return cachedChatId;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –¥–ª—è –ª—É—á—à–µ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const getDeviceInfo = () => {
  try {
    return {
      userAgent: navigator.userAgent,
      platform: navigator.platform,
      language: navigator.language,
      screenResolution: `${screen.width}x${screen.height}`,
      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
    };
  } catch (error) {
    return {};
  }
};

interface OrderItem {
  price: number;
  quantity: number;
  productId: string;
  productName: string;
  articleNumber: string;
}

interface Order {
  id: string;
  user_id: string;
  customer_name: string;
  customer_email: string;
  customer_phone: string;
  items: OrderItem[]; // –í–∞–∂–Ω–æ: —ç—Ç–æ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
  total: number;
  status: string;
  delivery_address: string;
  delivery_method: string;
  created_at: string;
  updated_at: string;
  order_number: number;
  tracking_number: string | null;
  tracking_url: string | null;
  source: string;
}


export const sendToTelegram = async (response: any): Promise<boolean> => {
  try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
      if (!response || !response.success || !response.order) {
          console.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:", response);
          return false;
      }

      const order = response.order;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤
      if (!order.items || !Array.isArray(order.items) || order.items.length === 0) {
          console.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:", order);
          return false;
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
      const formatDate = (dateString: string) => {
          const date = new Date(dateString);
          return date.toLocaleString('ru-RU', {
              day: '2-digit',
              month: '2-digit',
              year: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
          });
      };

      // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      let message = `üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.order_number}*\n\n`;
      message += `üìÖ *–î–∞—Ç–∞:* ${formatDate(order.created_at)}\n`;
      message += `üë§ *–ò–º—è:* ${order.customer_name}\n`;
      message += `‚úâÔ∏è *Email:* ${order.customer_email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
      message += `üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${order.customer_phone}\n`;
      message += `üöö *–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:* ${order.delivery_method}\n`;
      message += `üè† *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* ${order.delivery_address}\n\n`;
      message += `üì¶ *–¢–æ–≤–∞—Ä—ã:*\n`;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
      order.items.forEach((item: any, index: number) => {
          const product = item.product;
          const sum = parseFloat(product.price) * item.quantity;
          
          message += `${index + 1}. *${product.title}*\n`;
          message += `   –ê—Ä—Ç–∏–∫—É–ª: ${product.article_number}\n`;
          message += `   –¶–µ–Ω–∞: ${parseFloat(product.price).toLocaleString('ru-RU')} ‚ÇΩ\n`;
          message += `   –ö–æ–ª-–≤–æ: ${item.quantity}\n`;
          message += `   –°—É–º–º–∞: ${sum.toLocaleString('ru-RU')} ‚ÇΩ\n\n`;
      });

      message += `üí≥ *–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:* ${parseFloat(order.total).toLocaleString('ru-RU')} ‚ÇΩ\n`;
      message += `üü¢ *–°—Ç–∞—Ç—É—Å:* ${order.status === 'new' ? '–ù–æ–≤—ã–π' : order.status}`;

      console.log("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message);
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è sendMessage)
      return await sendMessage(message, {
          name: order.customer_name,
          email: order.customer_email
      });
  } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
      return false;
  }
};

export const sendMessage = async (
  message: string,
  userInfo?: { name?: string; email?: string }
): Promise<boolean> => {
  try {
    const chatId = getChatId();
    const deviceInfo = getDeviceInfo();
 
    // –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã supabase –∏ –≤—ã–∑–æ–≤—ã supabase.functions.invoke —É–¥–∞–ª–µ–Ω—ã
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏:
    console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞):", message);
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", userInfo);
    console.log("–ß–∞—Ç ID:", chatId);
    console.log("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:", deviceInfo);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ–±–∞–≤–∏–º userInfo, –µ—Å–ª–∏ –µ—Å—Ç—å)
  

    const url = `https://api.telegram.org/bot8139116930:AAHDuUQt4P1exwlEby24VC1nmSmDMAu6SUg/sendMessage`;
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        chat_id: 342722215,
        text: message
      })
    });

    if (!response.ok) {
      console.error('–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', response.status, await response.text());
      return false;
    }

    const data = await response.json();
    if (!data.ok) {
      console.error('–û—à–∏–±–∫–∞ Telegram API:', data);
      return false;
    }
    console.log('–û—Ç–≤–µ—Ç Telegram:', data);
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ sendMessage:', error);
    return false;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
export const getMessages = async (): Promise<ChatMessage[]> => {
  try {
    const chatId = getChatId();
    console.log("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è chat ID:", chatId);
      
    console.log("=============================================")
    console.log('GOOGLE_CLIENT_ID:', process.env)
    // –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã supabase –∏ –≤—ã–∑–æ–≤—ã supabase.functions.invoke —É–¥–∞–ª–µ–Ω—ã
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏:
    console.log("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞–≥–ª—É—à–∫–∞) –¥–ª—è chat ID:", chatId);
    return []; // –ó–∞–≥–ª—É—à–∫–∞
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ getMessages:", error);
    return [];
  }
};

// –û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
export const markMessagesAsRead = async (): Promise<boolean> => {
  try {
    const chatId = getChatId();
    
    // –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã supabase –∏ –≤—ã–∑–æ–≤—ã supabase.functions.invoke —É–¥–∞–ª–µ–Ω—ã
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏:
    console.log("–û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞) –¥–ª—è chat ID:", chatId);
    return true; // –ó–∞–≥–ª—É—à–∫–∞
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ markMessagesAsRead:", error);
    return false;
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ webhook Telegram
export const checkTelegramWebhookStatus = async (): Promise<any> => {
  try {
    // –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã supabase –∏ –≤—ã–∑–æ–≤—ã supabase.functions.invoke —É–¥–∞–ª–µ–Ω—ã
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏:
    console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ webhook (–∑–∞–≥–ª—É—à–∫–∞)");
    return { ok: false }; // –ó–∞–≥–ª—É—à–∫–∞
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ checkTelegramWebhookStatus:", error);
    return { ok: false };
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ telegram-chat
export const checkChatStatus = async (): Promise<{
  ok: boolean;
  config?: {
    telegram_bot_token_set: boolean;
    telegram_admin_chat_id_set: boolean;
    supabase_url_set: boolean;
    supabase_service_role_key_set: boolean;
  };
}> => {
  try {
 
    // –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã supabase –∏ –≤—ã–∑–æ–≤—ã supabase.functions.invoke —É–¥–∞–ª–µ–Ω—ã
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏:
    console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)");
    return { 
      ok: false, // –ó–∞–≥–ª—É—à–∫–∞
      config: {
        telegram_bot_token_set: false,
        telegram_admin_chat_id_set: false,
        supabase_url_set: false,
        supabase_service_role_key_set: false
      } // –ó–∞–≥–ª—É—à–∫–∞
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ checkChatStatus:", error);
    return { ok: false };
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
export const pollForNewMessages = async (
  lastMessageId: number | null,
  callback: (messages: ChatMessage[]) => void
): Promise<void> => {
  try {
    const messages = await getMessages();
    
    if (messages.length === 0) return;
    
    const latestMessageId = Math.max(...messages.map(m => m.id));
    
    if (lastMessageId === null || latestMessageId > lastMessageId) {
      callback(messages);
    }
  } catch (error) {
    // –û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (console.error —É–¥–∞–ª—ë–Ω)
  }
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Telegram
export const setupTelegramWebhook = async (url: string): Promise<boolean> => {
  try {
    // –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã supabase –∏ –≤—ã–∑–æ–≤—ã supabase.functions.invoke —É–¥–∞–ª–µ–Ω—ã
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏:
    console.log("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook (–∑–∞–≥–ª—É—à–∫–∞) –¥–ª—è URL:", url);
    return false; // –ó–∞–≥–ª—É—à–∫–∞
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ setupTelegramWebhook:", error);
    return false;
  }
};

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
export const syncChatAcrossDevices = async (): Promise<void> => {
  try {
    const chatId = getChatId();
    console.log("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ –¥–ª—è ID:", chatId);
    
    // –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã supabase –∏ –≤—ã–∑–æ–≤—ã supabase.functions.invoke —É–¥–∞–ª–µ–Ω—ã
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏:
    console.log("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ (–∑–∞–≥–ª—É—à–∫–∞) –¥–ª—è ID:", chatId);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ syncChatAcrossDevices:", error);
  }
};
