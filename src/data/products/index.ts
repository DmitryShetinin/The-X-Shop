// Export from productData with the original name
export * from "./productData";

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º addCategory, updateCategoryImage, removeCategory, updateProductsCategory –∏ getProductsByCategory –∏–∑ categoryData
import { addCategory, updateCategoryImage, removeCategory, updateProductsCategory, getProductsByCategory as getProductsByCategoryFromCategoryData } from './categoryData';
export { addCategory, updateCategoryImage, removeCategory, updateProductsCategory };

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∏–ø Category
import { Category } from '@/data/sqlite/database';
export type { Category };

import { Product } from '@/types/product';
import { fetchProductsFromSupabase, getProductsByCategoryFromSupabase } from './supabase/productApi';
import { fetchCategoriesFromSupabase } from './supabase/categoryApi';
import { fetchProductsFromSQLite, getProductsByCategoryFromSQLite } from './sqlite/productApi';
import { fetchCategoriesFromSQLite } from './sqlite/categoryApi';

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º getCategoryProducts –∫–∞–∫ –∞–ª–∏–∞—Å –¥–ª—è getProductsByCategoryFromCategoryData –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
export const getCategoryProducts = getProductsByCategoryFromCategoryData;

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
const isProduction = import.meta.env.PROD;
const isVercel = import.meta.env.VITE_VERCEL === '1' || (typeof window !== 'undefined' && window.location.hostname.includes('vercel.app'));
const useSupabase = isProduction || isVercel;

console.log('üåç Environment detection:', {
  NODE_ENV: import.meta.env.MODE,
  VERCEL: import.meta.env.VITE_VERCEL,
  useSupabase,
  isProduction,
  isVercel
});

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 */
export const getActiveProducts = async (): Promise<Product[]> => {
  console.log('üì¶ getActiveProducts: Starting with', useSupabase ? 'Supabase' : 'SQLite');
  
  try {
    if (useSupabase) {
      const products = await fetchProductsFromSupabase();
      console.log(`‚úÖ getActiveProducts: Supabase returned ${products.length} products`);
      return products;
    } else {
      const products = await fetchProductsFromSQLite();
      console.log(`‚úÖ getActiveProducts: SQLite returned ${products.length} products`);
      return products;
    }
  } catch (error) {
    console.error('‚ùå getActiveProducts: Error with primary source:', error);
    
    // Fallback –∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É
    try {
      if (useSupabase) {
        const products = await fetchProductsFromSQLite();
        console.log(`‚úÖ getActiveProducts: SQLite fallback returned ${products.length} products`);
        return products;
      } else {
        const products = await fetchProductsFromSupabase();
        console.log(`‚úÖ getActiveProducts: Supabase fallback returned ${products.length} products`);
        return products;
      }
    } catch (fallbackError) {
      console.error('‚ùå getActiveProducts: Both sources failed:', fallbackError);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞');
    }
  }
};

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export const getProductsByCategory = async (category: string): Promise<Product[]> => {
  console.log('üìÇ getProductsByCategory: Starting with', useSupabase ? 'Supabase' : 'SQLite', 'for category:', category);
  
  try {
    if (useSupabase) {
      const products = await getProductsByCategoryFromSupabase(category);
      console.log(`‚úÖ getProductsByCategory: Supabase returned ${products.length} products for category "${category}"`);
      return products;
    } else {
      const products = await getProductsByCategoryFromSQLite(category);
      console.log(`‚úÖ getProductsByCategory: SQLite returned ${products.length} products for category "${category}"`);
      return products;
    }
  } catch (error) {
    console.error('‚ùå getProductsByCategory: Error with primary source:', error);
    
    // Fallback –∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É
    try {
      if (useSupabase) {
        const products = await getProductsByCategoryFromSQLite(category);
        console.log(`‚úÖ getProductsByCategory: SQLite fallback returned ${products.length} products for category "${category}"`);
        return products;
      } else {
        const products = await getProductsByCategoryFromSupabase(category);
        console.log(`‚úÖ getProductsByCategory: Supabase fallback returned ${products.length} products for category "${category}"`);
        return products;
      }
    } catch (fallbackError) {
      console.error('‚ùå getProductsByCategory: Both sources failed:', fallbackError);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}" –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞`);
    }
  }
};

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
export const getAllCategories = async (): Promise<string[]> => {
  console.log('üìÇ getAllCategories: Starting with', useSupabase ? 'Supabase' : 'SQLite');
  
  try {
    if (useSupabase) {
      const categories = await fetchCategoriesFromSupabase();
      console.log(`‚úÖ getAllCategories: Supabase returned ${categories.length} categories`);
      return categories;
    } else {
      const categories = await fetchCategoriesFromSQLite();
      const categoryNames = categories.map(cat => cat.name);
      console.log(`‚úÖ getAllCategories: SQLite returned ${categoryNames.length} categories`);
      return categoryNames;
    }
  } catch (error) {
    console.error('‚ùå getAllCategories: Error with primary source:', error);
    // Fallback –∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É
    try {
      if (useSupabase) {
        const categories = await fetchCategoriesFromSQLite();
        const categoryNames = categories.map(cat => cat.name);
        console.log(`‚úÖ getAllCategories: SQLite fallback returned ${categoryNames.length} categories`);
        return categoryNames;
      } else {
        const categories = await fetchCategoriesFromSupabase();
        console.log(`‚úÖ getAllCategories: Supabase fallback returned ${categories.length} categories`);
        return categories;
      }
    } catch (fallbackError) {
      console.error('‚ùå getAllCategories: Both sources failed:', fallbackError);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞');
    }
  }
};

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
export const getCategoryObjects = async (): Promise<Category[]> => {
  console.log('üìÇ getCategoryObjects: Starting with', useSupabase ? 'Supabase' : 'SQLite');
  
  try {
    if (useSupabase) {
      const categories = await fetchCategoriesFromSupabase();
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç Category (name - —Å—Ç—Ä–æ–∫–∞)
      const categoryObjects: Category[] = categories.map((cat, index) => ({
        id: (index + 1).toString(),
        name: cat,
        description: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${cat}`,
        imageUrl: '/placeholder.svg',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }));
      console.log(`‚úÖ getCategoryObjects: Supabase returned ${categoryObjects.length} category objects`);
      return categoryObjects;
    } else {
      const categories = await fetchCategoriesFromSQLite();
      console.log(`‚úÖ getCategoryObjects: SQLite returned ${categories.length} category objects`);
      return categories;
    }
  } catch (error) {
    console.error('‚ùå getCategoryObjects: Error with primary source:', error);
    // Fallback –∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É
    try {
      if (useSupabase) {
        const categories = await fetchCategoriesFromSQLite();
        console.log(`‚úÖ getCategoryObjects: SQLite fallback returned ${categories.length} category objects`);
        return categories;
      } else {
        const categories = await fetchCategoriesFromSupabase();
        const categoryObjects: Category[] = categories.map((cat, index) => ({
          id: (index + 1).toString(),
          name: cat,
          description: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${cat}`,
          imageUrl: '/placeholder.svg',
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        }));
        console.log(`‚úÖ getCategoryObjects: Supabase fallback returned ${categoryObjects.length} category objects`);
        return categoryObjects;
      }
    } catch (fallbackError) {
      console.error('‚ùå getCategoryObjects: Both sources failed:', fallbackError);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞');
    }
  }
};
