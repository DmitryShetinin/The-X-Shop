const fs = require('fs');
const path = require('path');
const sqlite3 = require('sqlite3').verbose();

async function initSQLiteDatabase() {
  try {
    console.log('üöÄ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const dbPath = path.join(__dirname, '../database.db');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const db = new sqlite3.Database(dbPath);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    await createTables(db);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await insertTestData(db);
    
    console.log('‚úÖ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
    console.log(`üìÅ –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${dbPath}`);
    
    db.close();
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite:', error);
    process.exit(1);
  }
}

function createTables(db) {
  return new Promise((resolve, reject) => {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    db.run(`
      CREATE TABLE IF NOT EXISTS products (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        description TEXT,
        price REAL NOT NULL,
        discount_price REAL,
        category TEXT NOT NULL,
        image_url TEXT,
        additional_images TEXT,
        rating REAL DEFAULT 4.7,
        in_stock BOOLEAN DEFAULT TRUE,
        colors TEXT,
        sizes TEXT,
        material TEXT,
        country_of_origin TEXT,
        specifications TEXT,
        is_new BOOLEAN DEFAULT FALSE,
        is_bestseller BOOLEAN DEFAULT FALSE,
        article_number TEXT,
        barcode TEXT,
        ozon_url TEXT,
        wildberries_url TEXT,
        avito_url TEXT,
        archived BOOLEAN DEFAULT FALSE,
        stock_quantity INTEGER DEFAULT 0,
        color_variants TEXT,
        video_url TEXT,
        video_type TEXT,
        created_at TEXT DEFAULT CURRENT_TIMESTAMP,
        updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
        model_name TEXT,
        wildberries_sku TEXT
      )
    `, (err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã products:', err);
        reject(err);
        return;
      }
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ products —Å–æ–∑–¥–∞–Ω–∞');
      
      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      db.run(`
        CREATE TABLE IF NOT EXISTS categories (
          id TEXT PRIMARY KEY,
          name TEXT NOT NULL UNIQUE,
          description TEXT,
          image TEXT,
          created_at TEXT DEFAULT CURRENT_TIMESTAMP,
          updated_at TEXT DEFAULT CURRENT_TIMESTAMP
        )
      `, (err) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã categories:', err);
          reject(err);
          return;
        }
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ categories —Å–æ–∑–¥–∞–Ω–∞');
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        db.run(`
          CREATE TABLE IF NOT EXISTS users (
            id TEXT PRIMARY KEY,
            email TEXT UNIQUE NOT NULL,
            role TEXT DEFAULT 'user',
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
          )
        `, (err) => {
          if (err) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users:', err);
            reject(err);
            return;
          }
          console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞');
          
          // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤
          db.run(`
            CREATE TABLE IF NOT EXISTS orders (
              id TEXT PRIMARY KEY,
              user_id TEXT NOT NULL,
              status TEXT DEFAULT 'pending',
              total REAL NOT NULL,
              created_at TEXT DEFAULT CURRENT_TIMESTAMP,
              FOREIGN KEY (user_id) REFERENCES users (id)
            )
          `, (err) => {
            if (err) {
              console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã orders:', err);
              reject(err);
              return;
            }
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ orders —Å–æ–∑–¥–∞–Ω–∞');
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑–∞
            db.run(`
              CREATE TABLE IF NOT EXISTS order_items (
                id TEXT PRIMARY KEY,
                order_id TEXT NOT NULL,
                product_id TEXT NOT NULL,
                quantity INTEGER NOT NULL,
                price REAL NOT NULL,
                FOREIGN KEY (order_id) REFERENCES orders (id),
                FOREIGN KEY (product_id) REFERENCES products (id)
              )
            `, (err) => {
              if (err) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã order_items:', err);
                reject(err);
                return;
              }
              console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ order_items —Å–æ–∑–¥–∞–Ω–∞');
              resolve();
            });
          });
        });
      });
    });
  });
}

function insertTestData(db) {
  return new Promise((resolve, reject) => {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = [
      { id: '1', name: '–°–º–∞—Ä—Ç-—á–∞—Å—ã', description: '–£–º–Ω—ã–µ —á–∞—Å—ã –∏ —Ñ–∏—Ç–Ω–µ—Å-–±—Ä–∞—Å–ª–µ—Ç—ã', image: '/placeholder.svg' },
      { id: '2', name: '–ü–ª–∞–Ω—à–µ—Ç—ã', description: '–ü–ª–∞–Ω—à–µ—Ç—ã –∏ –ø–ª–∞–Ω—à–µ—Ç–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã', image: '/placeholder.svg' },
      { id: '3', name: '–ü—Ä–æ–µ–∫—Ç–æ—Ä—ã', description: '–î–æ–º–∞—à–Ω–∏–µ –∏ –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–æ—Ä—ã', image: '/placeholder.svg' },
      { id: '4', name: '–§–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç—ã', description: '–¶–∏—Ñ—Ä–æ–≤—ã–µ –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç—ã', image: '/placeholder.svg' },
      { id: '5', name: '–ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏', description: '–ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å–æ–ª–∏ –∏ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏', image: '/placeholder.svg' }
    ];
    
    const insertCategory = db.prepare('INSERT OR IGNORE INTO categories (id, name, description, image) VALUES (?, ?, ?, ?)');
    
    categories.forEach(category => {
      insertCategory.run([category.id, category.name, category.description, category.image]);
    });
    
    insertCategory.finalize((err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', err);
        reject(err);
        return;
      }
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
      const products = [
        {
          id: 'test-1',
          title: '–°–º–∞—Ä—Ç-—á–∞—Å—ã DT 8 Mini',
          description: '–£–º–Ω—ã–µ —á–∞—Å—ã —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∑–¥–æ—Ä–æ–≤—å—è',
          price: 3500,
          category: '–°–º–∞—Ä—Ç-—á–∞—Å—ã',
          image_url: '/placeholder.svg',
          rating: 4.8,
          stock_quantity: 10
        },
        {
          id: 'test-2',
          title: '–ü–ª–∞–Ω—à–µ—Ç Android 10"',
          description: '–ü–ª–∞–Ω—à–µ—Ç —Å Android –∏ –∏–≥—Ä–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π',
          price: 12000,
          category: '–ü–ª–∞–Ω—à–µ—Ç—ã',
          image_url: '/placeholder.svg',
          rating: 4.7,
          stock_quantity: 5
        },
        {
          id: 'test-3',
          title: '–ü—Ä–æ–µ–∫—Ç–æ—Ä Full HD',
          description: '–î–æ–º–∞—à–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–æ—Ä –¥–ª—è —Ñ–∏–ª—å–º–æ–≤',
          price: 8000,
          category: '–ü—Ä–æ–µ–∫—Ç–æ—Ä—ã',
          image_url: '/placeholder.svg',
          rating: 4.6,
          stock_quantity: 3
        }
      ];
      
      const insertProduct = db.prepare(`
        INSERT OR IGNORE INTO products 
        (id, title, description, price, category, image_url, rating, stock_quantity) 
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
      `);
      
      products.forEach(product => {
        insertProduct.run([
          product.id,
          product.title,
          product.description,
          product.price,
          product.category,
          product.image_url,
          product.rating,
          product.stock_quantity
        ]);
      });
      
      insertProduct.finalize((err) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', err);
          reject(err);
          return;
        }
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã');
        resolve();
      });
    });
  });
}

// –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
if (require.main === module) {
  initSQLiteDatabase();
}

module.exports = initSQLiteDatabase; 