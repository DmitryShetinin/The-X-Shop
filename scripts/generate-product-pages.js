
const fs = require('fs');
const path = require('path');
const SupabaseClient = require('./lib/supabaseClient');
const ProductPageGenerator = require('./lib/productPageGenerator');
const SitemapGenerator = require('./lib/sitemapGenerator');

async function generateProductPages() {
  try {
    console.log('üöÄ –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Ç–æ–≤–∞—Ä–æ–≤...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    const supabaseClient = new SupabaseClient();
    const pageGenerator = new ProductPageGenerator();
    const sitemapGenerator = new SitemapGenerator();
    
    // –ü—É—Ç—å –∫ –ø—É–±–ª–∏—á–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const publicDir = path.join(__dirname, '../public');
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(publicDir)) {
      fs.mkdirSync(publicDir, { recursive: true });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ Supabase
    const products = await supabaseClient.getProducts();
    
    if (!products || products.length === 0) {
      console.log('‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    let generatedCount = 0;
    let errorCount = 0;
    
    for (const product of products) {
      try {
        const htmlContent = pageGenerator.generateProductHTML(product);
        const fileName = `product-${product.id}.html`;
        const filePath = path.join(publicDir, fileName);
        
        fs.writeFileSync(filePath, htmlContent, 'utf8');
        
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${fileName}`);
        generatedCount++;
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.id}:`, error.message);
        errorCount++;
      }
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º sitemap
    try {
      sitemapGenerator.saveSitemap(products, publicDir);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è sitemap:', error.message);
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: ${generatedCount} —Å—Ç—Ä–∞–Ω–∏—Ü`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`üìÅ –°—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${publicDir}`);
    
    if (generatedCount > 0) {
      console.log('\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      console.log('üí° –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫—É –Ø–Ω–¥–µ–∫—Å–∞');
    }
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
if (require.main === module) {
  generateProductPages();
}

module.exports = generateProductPages;
