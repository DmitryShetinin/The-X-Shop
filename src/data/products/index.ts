// Export from productData with the original name
export * from "./productData";

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º addCategory, updateCategoryImage, removeCategory, updateProductsCategory –∏ getProductsByCategory –∏–∑ categoryData
import { addCategory, updateCategoryImage, removeCategory, updateProductsCategory, getProductsByCategory as getProductsByCategoryFromCategoryData } from './categoryData';
export { addCategory, updateCategoryImage, removeCategory, updateProductsCategory };

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø Category –ª–æ–∫–∞–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ SQLite —É–¥–∞–ª–µ–Ω
export interface Category {
  id: string;
  name: string;
  description?: string;
  imageUrl?: string;
  productCount?: number;
}

import { Product } from '@/types/product';
import { fetchProductsFromPostgres, getProductsByCategoryFromPostgres } from './postgres/productApi';
import { fetchCategoriesFromPostgres } from './postgres/categoryApi';

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º getCategoryProducts –∫–∞–∫ –∞–ª–∏–∞—Å –¥–ª—è getProductsByCategoryFromCategoryData –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
export const getCategoryProducts = getProductsByCategoryFromCategoryData;

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 */
export const getActiveProducts = async (): Promise<Product[]> => {
  console.log('üì¶ getActiveProducts: Loading from PostgreSQL');
  try {
    const products = await fetchProductsFromPostgres();
    console.log(`‚úÖ getActiveProducts: PostgreSQL returned ${products.length} products`);
    return products;
  } catch (error) {
    console.error('‚ùå getActiveProducts: Error with PostgreSQL:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ PostgreSQL');
  }
};

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export const getProductsByCategory = async (category: string): Promise<Product[]> => {
  console.log('üìÇ getProductsByCategory: Loading from PostgreSQL for category:', category);
  try {
    const products = await getProductsByCategoryFromPostgres(category);
    console.log(`‚úÖ getProductsByCategory: PostgreSQL returned ${products.length} products for category "${category}"`);
    return products;
  } catch (error) {
    console.error('‚ùå getProductsByCategory: Error with PostgreSQL:', error);
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}" –∏–∑ PostgreSQL`);
  }
};

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
export const getAllCategories = async (): Promise<string[]> => {
  console.log('üìÇ getAllCategories: Loading from PostgreSQL');
  try {
    const categories = await fetchCategoriesFromPostgres();
    const categoryNames = categories.map(cat => cat.name);
    console.log(`‚úÖ getAllCategories: PostgreSQL returned ${categoryNames.length} categories`);
    return categoryNames.length > 0 ? categoryNames : ["–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "–ò–≥—Ä—É—à–∫–∏", "–î–ª—è –¥–æ–º–∞"];
  } catch (error) {
    console.error('‚ùå getAllCategories: Error with PostgreSQL, using fallback:', error);
    return ["–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "–ò–≥—Ä—É—à–∫–∏", "–î–ª—è –¥–æ–º–∞"];
  }
};

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
export const getCategoryObjects = async (): Promise<Category[]> => {
  console.log('üìÇ getCategoryObjects: Loading from PostgreSQL');
  try {
    const categories = await fetchCategoriesFromPostgres();
    console.log(`‚úÖ getCategoryObjects: PostgreSQL returned ${categories.length} category objects`);
    if (categories.length > 0) {
      return categories;
    } else {
      // Fallback –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      return [
        {
          id: "electronics",
          name: "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
          description: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –¥–ª—è –¥–æ–º–∞ –∏ –æ—Ñ–∏—Å–∞",
          imageUrl: "/placeholder.svg",
          productCount: 0
        },
        {
          id: "toys", 
          name: "–ò–≥—Ä—É—à–∫–∏",
          description: "–†–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∏–≥—Ä—É—à–∫–∏ –¥–ª—è –¥–µ—Ç–µ–π",
          imageUrl: "/placeholder.svg",
          productCount: 0
        },
        {
          id: "home",
          name: "–î–ª—è –¥–æ–º–∞", 
          description: "–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞ –∏ –±—ã—Ç–∞",
          imageUrl: "/placeholder.svg",
          productCount: 0
        }
      ];
    }
  } catch (error) {
    console.error('‚ùå getCategoryObjects: Error with PostgreSQL, using fallback:', error);
    // Fallback –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    return [
      {
        id: "electronics",
        name: "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
        description: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –¥–ª—è –¥–æ–º–∞ –∏ –æ—Ñ–∏—Å–∞",
        imageUrl: "/placeholder.svg",
        productCount: 0
      },
      {
        id: "toys",
        name: "–ò–≥—Ä—É—à–∫–∏", 
        description: "–†–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∏–≥—Ä—É—à–∫–∏ –¥–ª—è –¥–µ—Ç–µ–π",
        imageUrl: "/placeholder.svg",
        productCount: 0
      },
      {
        id: "home",
        name: "–î–ª—è –¥–æ–º–∞",
        description: "–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞ –∏ –±—ã—Ç–∞", 
        imageUrl: "/placeholder.svg",
        productCount: 0
      }
    ];
  }
};
