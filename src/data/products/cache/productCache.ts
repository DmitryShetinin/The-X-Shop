import { fetchProductsFromSQLite } from "../sqlite/productApi";
import { Product } from "@/types/product";

// –ö—ç—à –ø—Ä–æ–¥—É–∫—Ç–æ–≤
let productsCache: Product[] = [];
let lastCacheUpdate = 0;
const CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –∫—ç—à–∞
 */
export const getProductsCache = (): Product[] => {
  console.log('üì¶ getProductsCache: Returning cached products:', productsCache.length);
  return productsCache;
};

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
 */
export const refreshCacheIfNeeded = async (force = false): Promise<void> => {
  console.log('üîÑ refreshCacheIfNeeded: Starting cache refresh...');
  const now = Date.now();
  const shouldRefresh = force || (now - lastCacheUpdate) > CACHE_DURATION;
  
  console.log('üìä refreshCacheIfNeeded: Cache status:', {
    shouldRefresh,
    force,
    timeSinceLastUpdate: now - lastCacheUpdate,
    cacheDuration: CACHE_DURATION,
    currentCacheSize: productsCache.length
  });
  
  if (!shouldRefresh && productsCache.length > 0) {
    console.log('‚úÖ refreshCacheIfNeeded: Using existing cache');
    return;
  }
  
  try {
    console.log('üì• refreshCacheIfNeeded: Fetching products from SQLite...');
    const products = await fetchProductsFromSQLite();
    productsCache = products;
    lastCacheUpdate = now;
    console.log(`‚úÖ refreshCacheIfNeeded: Cache updated with ${products.length} products`);
  } catch (error) {
    console.error('‚ùå refreshCacheIfNeeded: Error updating cache:', error);
    throw error;
  }
};

/**
 * –û—á–∏—â–∞–µ—Ç –∫—ç—à –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 */
export const invalidateCache = (): void => {
  console.log('üóëÔ∏è invalidateCache: Clearing cache');
  productsCache = [];
  lastCacheUpdate = 0;
};
