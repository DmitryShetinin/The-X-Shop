import { supabase } from "@/integrations/supabase/client";
import { v4 as uuidv4 } from "uuid";
import { ChatMessage } from "@/types/chat";

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ ID —á–∞—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
let cachedChatId: string | null = null;

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 */
export const getChatId = (): string => {
  if (cachedChatId) {
    return cachedChatId;
  }

  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ localStorage
    const stored = typeof localStorage !== "undefined"
      ? localStorage.getItem("chat_id")
      : null;

    if (stored) {
      cachedChatId = stored;
    } else {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
      cachedChatId = `chat_${Date.now()}_${uuidv4()}`;
      if (typeof localStorage !== "undefined") {
        localStorage.setItem("chat_id", cachedChatId);
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ localStorage –¥–ª—è chat_id:", error);
    if (!cachedChatId) {
      cachedChatId = `chat_${Date.now()}_${uuidv4()}`;
    }
  }

  return cachedChatId;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –¥–ª—è –ª—É—á—à–µ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const getDeviceInfo = () => {
  try {
    return {
      userAgent: navigator.userAgent,
      platform: navigator.platform,
      language: navigator.language,
      screenResolution: `${screen.width}x${screen.height}`,
      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
    };
  } catch (error) {
    return {};
  }
};

interface OrderItem {
  price: number;
  quantity: number;
  productId: string;
  productName: string;
  articleNumber: string;
}

interface Order {
  id: string;
  user_id: string;
  customer_name: string;
  customer_email: string;
  customer_phone: string;
  items: OrderItem[]; // –í–∞–∂–Ω–æ: —ç—Ç–æ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
  total: number;
  status: string;
  delivery_address: string;
  delivery_method: string;
  created_at: string;
  updated_at: string;
  order_number: number;
  tracking_number: string | null;
  tracking_url: string | null;
  source: string;
}
export const sendOrderNotification = async (response: any): Promise<boolean> => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
    if (!response || !response.success || !response.order) {
      console.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:", response);
      return false;
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞
    const order = response.order;
    
    // –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ–º —Å order
    console.log("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:", JSON.stringify(order, null, 2));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
    if (!order.items || !Array.isArray(order.items)) {
      console.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:", order);
      return false;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    const formatDate = (dateStr: string) => {
      try {
        return new Date(dateStr).toLocaleString("ru-RU");
      } catch {
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞";
      }
    };

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.order_number}*\n\n`;
    message += `üìÖ *–î–∞—Ç–∞:* ${formatDate(order.created_at)}\n`;
    message += `üë§ *–ò–º—è:* ${order.customer_name}\n`;
    message += `‚úâÔ∏è *Email:* ${order.customer_email}\n`;
    message += `üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${order.customer_phone}\n`;
    message += `üè† *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* ${order.delivery_address}\n\n`;
    message += `üì¶ *–¢–æ–≤–∞—Ä—ã:*\n`;

    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    order.items.forEach((item, index) => {
      message += `${index + 1}. *${item.productName}*\n`;
      message += `   –ê—Ä—Ç–∏–∫—É–ª: ${item.articleNumber}\n`;
      message += `   –¶–µ–Ω–∞: ${item.price.toLocaleString("ru-RU")} ‚ÇΩ\n`;
      message += `   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}\n`;
      message += `   –°—É–º–º–∞: ${(item.price * item.quantity).toLocaleString("ru-RU")} ‚ÇΩ\n\n`;
    });

    message += `üí≥ *–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:* ${order.total.toLocaleString("ru-RU")} ‚ÇΩ`;

    console.log("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    return await sendMessage(message, {
      name: order.customer_name,
      email: order.customer_email
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
    return false;
  }
};


export const sendMessage = async (
  message: string,
  userInfo?: { name?: string; email?: string }
): Promise<boolean> => {
  try {
    const chatId = getChatId();
    const deviceInfo = getDeviceInfo();
 
    const response = await supabase.functions.invoke("telegram-chat/send", {
      body: { 
        chatId, 
        message,
        parse_mode: "MarkdownV2", // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Markdown
        name: userInfo?.name || '', 
        email: userInfo?.email || '',
        deviceInfo,
        timestamp: new Date().toISOString(),
        page: window.location.pathname,
        referrer: document.referrer || 'direct'
      },
    });
    
    if (response.error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", response.error);
      return false;
    }
    
    if (response.data && response.data.error) {
      console.error("–û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏:", response.data.error, response.data.details);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ sendMessage:", error);
    return false;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
export const getMessages = async (): Promise<ChatMessage[]> => {
  try {
    const chatId = getChatId();
    console.log("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è chat ID:", chatId);
    
    const response = await supabase.functions.invoke("telegram-chat/messages", {
      body: { chatId },
    });
    
    if (response.error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:", response.error);
      return [];
    }
    
    if (response.data && response.data.error) {
      console.error("–û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏:", response.data.error);
      return [];
    }
    
    console.log("–ü–æ–ª—É—á–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è:", response.data?.messages || []);
    return response.data?.messages || [];
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ getMessages:", error);
    return [];
  }
};

// –û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
export const markMessagesAsRead = async (): Promise<boolean> => {
  try {
    const chatId = getChatId();
    
    const response = await supabase.functions.invoke("telegram-chat/mark-read", {
      body: { chatId },
    });
    
    if (response.error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:", response.error);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ markMessagesAsRead:", error);
    return false;
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ webhook Telegram
export const checkTelegramWebhookStatus = async (): Promise<any> => {
  try {
    const response = await supabase.functions.invoke("telegram-chat/webhook-status", {});
    
    if (response.error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ webhook:", response.error);
      return { ok: false };
    }
    
    return response.data || {};
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ checkTelegramWebhookStatus:", error);
    return { ok: false };
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ telegram-chat
export const checkChatStatus = async (): Promise<{
  ok: boolean;
  config?: {
    telegram_bot_token_set: boolean;
    telegram_admin_chat_id_set: boolean;
    supabase_url_set: boolean;
    supabase_service_role_key_set: boolean;
  };
}> => {
  try {
 
    const response = await supabase.functions.invoke("telegram-chat/status", {});
    
    if (response.error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞:", response.error);
      return { ok: false };
    }
    
    return { 
      ok: response.data?.status === "ok",
      config: response.data?.config 
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ checkChatStatus:", error);
    return { ok: false };
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
export const pollForNewMessages = async (
  lastMessageId: number | null,
  callback: (messages: ChatMessage[]) => void
): Promise<void> => {
  try {
    const messages = await getMessages();
    
    if (messages.length === 0) return;
    
    const latestMessageId = Math.max(...messages.map(m => m.id));
    
    if (lastMessageId === null || latestMessageId > lastMessageId) {
      callback(messages);
    }
  } catch (error) {
    // –û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (console.error —É–¥–∞–ª—ë–Ω)
  }
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Telegram
export const setupTelegramWebhook = async (url: string): Promise<boolean> => {
  try {
    const response = await supabase.functions.invoke("telegram-chat/setup-webhook", {
      body: { url },
    });

    if (response.error || (response.data && response.data.error)) {
      console.error("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:", response.error || response.data.error);
      return false;
    }

    return !!response.data?.success;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ setupTelegramWebhook:", error);
    return false;
  }
};

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
export const syncChatAcrossDevices = async (): Promise<void> => {
  try {
    const chatId = getChatId();
    console.log("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ –¥–ª—è ID:", chatId);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    const response = await supabase.functions.invoke("telegram-chat/sync", {
      body: { 
        chatId,
        lastActive: new Date().toISOString(),
        deviceInfo: getDeviceInfo()
      },
    });
    
    if (response.error) {
      console.error("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞:", response.error);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ syncChatAcrossDevices:", error);
  }
};
