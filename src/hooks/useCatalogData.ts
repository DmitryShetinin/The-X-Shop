import { useState, useEffect } from "react";
import { getProductsByCategory, getAllCategories, getCategoryObjects, getActiveProducts, Category } from "@/data/products";
import { Product } from "@/types/product";
 

export const useCatalogData = (categoryParam: string | null) => {
  const [allProducts, setAllProducts] = useState<Product[]>([]);
  const [availableCategories, setAvailableCategories] = useState<string[]>([]);
  const [categoryObjects, setCategoryObjects] = useState<Category[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [retryCount, setRetryCount] = useState<number>(0);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  useEffect(() => {
    async function loadData() {
      console.log('üöÄ useCatalogData: Starting data load...');
      console.log('üìä useCatalogData: Category param:', categoryParam);
      
      try {
        setLoading(true);
        setError(null);
        
        console.log('üì• useCatalogData: Loading categories and products...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç—ã —Å retry –ª–æ–≥–∏–∫–æ–π
        const [categoriesData, categoryObjsData, productsData] = await Promise.allSettled([
          getAllCategories(),
          getCategoryObjects(),
          categoryParam ? getProductsByCategory(categoryParam) : getActiveProducts()
        ]);

        console.log('üìã useCatalogData: Categories data:', categoriesData);
        console.log('üìÇ useCatalogData: Category objects data:', categoryObjsData);
        console.log('üì¶ useCatalogData: Products data:', productsData);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if (categoriesData.status === 'fulfilled') {
          console.log('‚úÖ useCatalogData: Categories loaded successfully:', categoriesData.value);
          setAvailableCategories(categoriesData.value);
        } else {
          console.warn('‚ùå useCatalogData: Failed to load categories:', categoriesData.reason);
          setAvailableCategories([]);
        }
        
        if (categoryObjsData.status === 'fulfilled') {
          console.log('‚úÖ useCatalogData: Category objects loaded successfully:', categoryObjsData.value);
          setCategoryObjects(categoryObjsData.value);
        } else {
          console.warn('‚ùå useCatalogData: Failed to load category objects:', categoryObjsData.reason);
          setCategoryObjects([]);
        }
        
        if (productsData.status === 'fulfilled') {
          console.log('‚úÖ useCatalogData: Products loaded successfully:', productsData.value.length);
          console.log('üìã useCatalogData: First product sample:', productsData.value[0]);
          setAllProducts(productsData.value);
          setRetryCount(0); // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        } else {
          console.error('‚ùå useCatalogData: Failed to load products:', productsData.reason);
          setAllProducts([]);
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π retry –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
          if (retryCount < 2) {
            console.log(`üîÑ useCatalogData: Retrying in ${2000 * (retryCount + 1)}ms...`);
            setTimeout(() => {
              setRetryCount(prev => prev + 1);
            }, 2000 * (retryCount + 1)); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥—ã–º retry
          }
        }
        
      } catch (error) {
        console.error("‚ùå useCatalogData: Error during data load:", error);
        setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
      } finally {
        setLoading(false);
        console.log('üèÅ useCatalogData: Data loading completed');
      }
    }
    
    loadData();
  }, [categoryParam, retryCount]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ retry
  const retry = () => {
    console.log('üîÑ useCatalogData: Manual retry triggered');
    setRetryCount(prev => prev + 1);
  };

  console.log('üìä useCatalogData: Current state:', {
    allProducts: allProducts.length,
    availableCategories: availableCategories.length,
    categoryObjects: categoryObjects.length,
    loading,
    error,
    retryCount
  });

  return {
    allProducts,
    availableCategories,
    categoryObjects,
    loading,
    error,
    retry
  };
};
